# hara_rev_doc.py - HARA Review Word document formatter
from datetime import datetime
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml.ns import qn
from docx.oxml import OxmlElement
from cat.log import log

def create_hara_review_docx(reviews, plugin_folder, timestamp):
    """
    Create a formatted Word document for HARA Review.
    
    Args:
        reviews (list): List of parsed review items
        plugin_folder (str): Path to plugin folder
        timestamp (str): Timestamp for document metadata
        
    Returns:
        Document: python-docx Document object
    """
    log.info(f"Creating HARA Review document with {len(reviews)} review items")
    
    doc = Document()
    create_custom_styles(doc)
    add_header_footer(doc, plugin_folder)
    
    # Title page
    doc.add_paragraph('ISO 26262-3 Clause 6 - HARA Review Report', style="ReviewTitle")
    doc.add_paragraph(f"Review conducted on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 
                     style="ReviewSubtitle")
    doc.add_paragraph()
    
    # Summary section
    create_summary_section(doc, reviews)
    
    # Page break before detailed results
    doc.add_page_break()
    
    # Group reviews by category
    categorized_reviews = group_reviews_by_category(reviews)
    
    # Detailed review results by category
    create_detailed_results_section(doc, categorized_reviews)
    
    log.info("HARA Review document created successfully")
    return doc


def create_custom_styles(doc):
    """Create custom styles for HARA review document."""
    styles = doc.styles
    
    # Title style
    if 'ReviewTitle' not in styles:
        title_style = styles.add_style('ReviewTitle', 1)  # 1 = Paragraph
        title_style.font.name = 'Calibri'
        title_style.font.size = Pt(24)
        title_style.font.bold = True
        title_style.font.color.rgb = RGBColor(0, 70, 127)
        title_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_style.paragraph_format.space_after = Pt(12)
    
    # Subtitle style
    if 'ReviewSubtitle' not in styles:
        subtitle_style = styles.add_style('ReviewSubtitle', 1)
        subtitle_style.font.name = 'Calibri'
        subtitle_style.font.size = Pt(14)
        subtitle_style.font.color.rgb = RGBColor(89, 89, 89)
        subtitle_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
        subtitle_style.paragraph_format.space_after = Pt(24)
    
    # Header style
    if 'ReviewHeader' not in styles:
        header_style = styles.add_style('ReviewHeader', 1)
        header_style.font.name = 'Calibri'
        header_style.font.size = Pt(16)
        header_style.font.bold = True
        header_style.font.color.rgb = RGBColor(0, 70, 127)
        header_style.paragraph_format.space_before = Pt(12)
        header_style.paragraph_format.space_after = Pt(6)


def add_header_footer(doc, plugin_folder):
    """Add header and footer to document."""
    section = doc.sections[0]
    
    # Header
    header = section.header
    header_para = header.paragraphs[0]
    header_para.text = "ISO 26262-3 - HARA Review\nGenerated by Kineton FuSa Agent"
    header_para.style = doc.styles['Header']
    header_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Footer with page numbers
    footer = section.footer
    footer_para = footer.paragraphs[0]
    footer_para.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    # Add page number field
    run = footer_para.add_run()
    fldChar1 = OxmlElement('w:fldChar')
    fldChar1.set(qn('w:fldCharType'), 'begin')
    run._element.append(fldChar1)
    
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = "PAGE"
    run._element.append(instrText)
    
    fldChar2 = OxmlElement('w:fldChar')
    fldChar2.set(qn('w:fldCharType'), 'end')
    run._element.append(fldChar2)


def create_summary_section(doc, reviews):
    """Create summary section with statistics."""
    doc.add_paragraph("Executive Summary", style="ReviewHeader")
    
    # Calculate statistics
    total = len(reviews)
    pass_count = sum(1 for r in reviews if 'pass' in r.get('status', '').lower() and 'partial' not in r.get('status', '').lower())
    fail_count = sum(1 for r in reviews if 'fail' in r.get('status', '').lower() and 'partial' not in r.get('status', '').lower())
    partial_count = sum(1 for r in reviews if 'partial' in r.get('status', '').lower())
    na_count = sum(1 for r in reviews if 'not applicable' in r.get('status', '').lower() or 'n/a' in r.get('status', '').lower())
    
    compliance_rate = (pass_count / (total - na_count) * 100) if (total - na_count) > 0 else 0
    
    # Summary table
    table = doc.add_table(rows=6, cols=2)
    table.style = 'Light Grid Accent 1'
    table.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    # Fill summary data
    summary_data = [
        ("Total Review Items", str(total)),
        ("✅ Pass", str(pass_count)),
        ("❌ Fail", str(fail_count)),
        ("⚠️ Partial Pass", str(partial_count)),
        ("➖ Not Applicable", str(na_count)),
        ("Compliance Rate", f"{compliance_rate:.1f}%")
    ]
    
    for i, (label, value) in enumerate(summary_data):
        row = table.rows[i]
        row.cells[0].text = label
        row.cells[1].text = value
        
        # Bold labels
        row.cells[0].paragraphs[0].runs[0].font.bold = True
        
        # Color code compliance rate
        if i == 5:  # Compliance rate row
            if compliance_rate >= 90:
                row.cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 128, 0)
            elif compliance_rate >= 70:
                row.cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 140, 0)
            else:
                row.cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 0, 0)
    
    doc.add_paragraph()
    
    # Compliance assessment
    if compliance_rate >= 90:
        assessment = "✅ **Excellent** - HARA demonstrates strong ISO 26262 compliance."
    elif compliance_rate >= 70:
        assessment = "⚠️ **Good** - HARA meets most requirements but has areas for improvement."
    elif compliance_rate >= 50:
        assessment = "⚠️ **Fair** - HARA requires significant improvements to meet ISO 26262 standards."
    else:
        assessment = "❌ **Poor** - HARA has major compliance issues and requires substantial rework."
    
    para = doc.add_paragraph(assessment)
    para.paragraph_format.space_after = Pt(12)


def group_reviews_by_category(reviews):
    """Group review items by category."""
    categories = {}
    for review in reviews:
        category = review.get('category', 'Uncategorized')
        if category not in categories:
            categories[category] = []
        categories[category].append(review)
    
    # Define category order
    category_order = [
        "Hazard Identification",
        "Operational Situations",
        "Severity Assessment",
        "Exposure Assessment",
        "Controllability Assessment",
        "ASIL Determination",
        "Safety Goals",
        "Safe States and FTTI",
        "Documentation Quality",
        "Traceability",
        "Completeness",
        "Review and Approval"
    ]
    
    # Sort by predefined order
    sorted_categories = {}
    for cat in category_order:
        if cat in categories:
            sorted_categories[cat] = categories[cat]
    
    # Add any remaining categories
    for cat, items in categories.items():
        if cat not in sorted_categories:
            sorted_categories[cat] = items
    
    return sorted_categories


def create_detailed_results_section(doc, categorized_reviews):
    """Create detailed review results section."""
    doc.add_paragraph("Detailed Review Results", style="ReviewHeader")
    
    # Process each category
    for category, category_reviews in categorized_reviews.items():
        if not category_reviews:
            continue
        
        # Add category heading
        doc.add_paragraph(category, style="ReviewHeader")
        
        # Add category explanation
        add_category_explanation(doc, category)
        
        # Add review items
        for i, review in enumerate(category_reviews, 1):
            create_review_item_table(doc, review, category, i)
            doc.add_paragraph()  # Space between items
        
        doc.add_paragraph()  # Space between categories


def add_category_explanation(doc, category):
    """Add brief explanation for each category."""
    explanations = {
        "Hazard Identification": "Verifies that hazards are systematically identified, uniquely labeled, and traceable to item malfunctions.",
        "Operational Situations": "Ensures operational situations are specific, realistic, and consider environmental factors.",
        "Severity Assessment": "Checks that severity classifications (S0-S3) correctly reflect potential harm per ISO 26262 Table 1.",
        "Exposure Assessment": "Verifies exposure levels (E0-E4) accurately represent the probability of operational situations.",
        "Controllability Assessment": "Confirms controllability ratings (C0-C3) reflect average driver capability in the given scenario.",
        "ASIL Determination": "Validates ASIL calculations follow ISO 26262-3 Table 4 methodology correctly.",
        "Safety Goals": "Ensures safety goals are properly formulated, complete, and linked to hazards.",
        "Safe States and FTTI": "Checks that safe states and fault-tolerant time intervals are defined and justified.",
        "Documentation Quality": "Assesses completeness, clarity, and professional quality of HARA documentation.",
        "Traceability": "Verifies traceability links between HARA, Item Definition, and downstream work products.",
        "Completeness": "Confirms all required item functions, scenarios, and foreseeable misuse are analyzed.",
        "Review and Approval": "Validates formal review process, documentation, and necessary approvals are in place."
    }
    
    explanation = explanations.get(category, "")
    if explanation:
        para = doc.add_paragraph(explanation)
        para.style = 'Normal'
        para.paragraph_format.space_after = Pt(12)


def create_review_item_table(doc, review, category, item_number):
    """Create a formatted table for a single review item."""
    table = doc.add_table(rows=7, cols=2)
    table.style = 'Light List Accent 1'
    
    # Set column widths
    table.columns[0].width = Inches(1.5)
    table.columns[1].width = Inches(5.0)
    
    # Fill table data
    fields = [
        ("ID", review.get('id', 'N/A')),
        ("Requirement", review.get('requirement', 'N/A')),
        ("Description", review.get('description', 'N/A')),
        ("Status", review.get('status', 'N/A')),
        ("Comment", review.get('comment', 'N/A')),
        ("Hint for Improvement", review.get('hint_for_improvement', 'N/A')),
        ("ISO Clause", extract_iso_clause(review))
    ]
    
    for i, (label, value) in enumerate(fields):
        row = table.rows[i]
        row.cells[0].text = label
        row.cells[1].text = value
        
        # Bold labels
        row.cells[0].paragraphs[0].runs[0].font.bold = True
        row.cells[0].paragraphs[0].runs[0].font.size = Pt(10)
        
        # Format status cell with color
        if label == "Status":
            status_run = row.cells[1].paragraphs[0].runs[0]
            status_lower = value.lower()
            
            if 'pass' in status_lower and 'partial' not in status_lower:
                status_run.font.color.rgb = RGBColor(0, 128, 0)
                status_run.font.bold = True
            elif 'fail' in status_lower:
                status_run.font.color.rgb = RGBColor(255, 0, 0)
                status_run.font.bold = True
            elif 'partial' in status_lower:
                status_run.font.color.rgb = RGBColor(255, 140, 0)
                status_run.font.bold = True


def extract_iso_clause(review):
    """Extract ISO clause reference from review description."""
    desc = review.get('description', '')
    req = review.get('requirement', '')
    
    # Try to find ISO clause in description
    import re
    match = re.search(r'ISO\s+26262-\d+:\d+,?\s+Clause\s+[\d.]+', desc + ' ' + req)
    if match:
        return match.group(0)
    return "ISO 26262-3:2018, Clause 6"