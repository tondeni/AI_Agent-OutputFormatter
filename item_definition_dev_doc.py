# item_definition_dev_doc.py - Item Definition Word document formatter
import re
from docx import Document
from docx.shared import Pt, Inches, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from cat.log import log
from .utils import add_header_footer

def create_item_definition_styles(doc):
    """Create custom styles specifically for Item Definition documents."""
    try:
        # Title style
        title_style = doc.styles.add_style("CustomTitle", 1)
        title_style.base_style = doc.styles["Normal"]
        title_style.font.name = "Calibri"
        title_style.font.size = Pt(24)
        title_style.font.bold = True
        title_style.font.color.rgb = RGBColor(54, 95, 145)
        title_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
        title_style.paragraph_format.space_after = Pt(12)

        # Subtitle style
        subtitle_style = doc.styles.add_style("CustomSubtitle", 1)
        subtitle_style.base_style = doc.styles["Normal"]
        subtitle_style.font.name = "Calibri"
        subtitle_style.font.size = Pt(16)
        subtitle_style.font.color.rgb = RGBColor(54, 95, 145)
        subtitle_style.font.italic = True
        subtitle_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.CENTER
        subtitle_style.paragraph_format.space_after = Pt(12)

        # Heading 1
        h1_style = doc.styles.add_style("CustomHeading1", 1)
        h1_style.base_style = doc.styles["Heading 1"]
        h1_style.font.name = "Calibri"
        h1_style.font.size = Pt(18)
        h1_style.font.bold = True
        h1_style.font.color.rgb = RGBColor(54, 95, 145)
        h1_style.paragraph_format.space_before = Pt(12)
        h1_style.paragraph_format.space_after = Pt(6)

        # Heading 2
        h2_style = doc.styles.add_style("CustomHeading2", 1)
        h2_style.base_style = doc.styles["Heading 2"]
        h2_style.font.name = "Calibri"
        h2_style.font.size = Pt(16)
        h2_style.font.bold = True
        h2_style.font.color.rgb = RGBColor(79, 129, 189)
        h2_style.paragraph_format.space_before = Pt(10)
        h2_style.paragraph_format.space_after = Pt(4)

        # Heading 3
        h3_style = doc.styles.add_style("CustomHeading3", 1)
        h3_style.base_style = doc.styles["Heading 3"]
        h3_style.font.name = "Calibri"
        h3_style.font.size = Pt(14)
        h3_style.font.bold = True
        h3_style.font.color.rgb = RGBColor(112, 173, 71)
        h3_style.paragraph_format.space_before = Pt(8)
        h3_style.paragraph_format.space_after = Pt(2)

        # Body text
        body_style = doc.styles.add_style("CustomBody", 1)
        body_style.base_style = doc.styles["Normal"]
        body_style.font.name = "Calibri"
        body_style.font.size = Pt(10)
        body_style.paragraph_format.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY
        body_style.paragraph_format.space_after = Pt(6)
        body_style.paragraph_format.line_spacing = 1.15

    except Exception as e:
        log.warning(f"Some styles may already exist: {e}")

def create_item_definition_docx(content, plugin_folder, system_name):
    """
    Create a formatted Word document for Item Definition.
    
    Args:
        content (str): Item Definition content from LLM
        plugin_folder (str): Path to plugin folder
        system_name (str): Name of the system being documented
        
    Returns:
        Document: python-docx Document object
    """
    log.info(f"Creating Item Definition document for: {system_name}")
    
    doc = Document()
    create_item_definition_styles(doc)
    add_header_footer(doc, plugin_folder, 
                     "ISO 26262 Item Definition\nGenerated by Kineton FuSa Agent")
    
    # === FIRST PAGE ===
    heading = doc.add_heading('ISO 26262 Part 3 - Item Definition work product (ISO2626-3)', level=1)
    heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
    
    doc.add_paragraph("Item Definition", style="CustomTitle")
    doc.add_paragraph(f"Item: {system_name}", style="CustomSubtitle")
    doc.add_paragraph()  # Spacing
    
    # === PAGE BREAK ===
    doc.add_page_break()
    
    # Parse and add content
    parse_and_format_content(doc, content)
    
    log.info("Item Definition document created successfully")
    return doc

def parse_and_format_content(doc, content):
    """
    Parse markdown-style headings and format into styled Word paragraphs.
    Also handles inline formatting and bullet points.
    
    Args:
        doc: python-docx Document object
        content (str): Markdown-style content
    """
    lines = content.split("\n")

    for line in lines:
        stripped = line.strip()

        # Skip empty lines
        if not stripped:
            continue

        # Handle Headings
        if re.match(r'^# ', stripped):
            text = re.sub(r'^# ', '', stripped)
            p = doc.add_paragraph(text, style="CustomTitle")
        elif re.match(r'^## ', stripped):
            text = re.sub(r'^## ', '', stripped)
            p = doc.add_paragraph(text, style="CustomHeading1")
        elif re.match(r'^### ', stripped):
            text = re.sub(r'^### ', '', stripped)
            p = doc.add_paragraph(text, style="CustomHeading2")
        elif re.match(r'^\*Clause: .+\*$', stripped):
            text = stripped[1:-1]  # Remove surrounding *
            p = doc.add_paragraph(text, style="CustomBody")
            if p.runs:
                p.runs[0].font.italic = True
                p.runs[0].font.color.rgb = RGBColor(128, 128, 128)
                p.runs[0].font.size = Pt(10)
        elif re.match(r'^[-*] ', stripped):  # Bullet point
            # Remove leading bullet marker
            text = re.sub(r'^[-*] ', '', stripped)
            # Create paragraph with custom style
            p = doc.add_paragraph(style="CustomBody")
            p.paragraph_format.left_indent = Inches(0.5)
            p.paragraph_format.space_after = Pt(3)
            # Add bullet manually as first run
            p.add_run("• ")
            # Process the rest with inline formatting
            process_inline_formatting(p, text)
        else:
            # Regular paragraph
            p = doc.add_paragraph(style="CustomBody")
            process_inline_formatting(p, stripped)

def process_inline_formatting(paragraph, text):
    """
    Convert markdown **bold** and *italic* to Word formatting.
    Fully strips markdown syntax.
    
    Args:
        paragraph: python-docx Paragraph object
        text (str): Text with markdown formatting
    """
    # First, handle **bold** – greedy match, non-greedy inside
    parts = re.split(r'(\*\*[^*]*\*\*)', text)  # Match **...** without inner *
    
    for part in parts:
        if len(part) >= 4 and part.startswith('**') and part.endswith('**'):
            # It's a bold segment
            clean_text = part[2:-2]  # Strip **
            run = paragraph.add_run(clean_text)
            run.bold = True
        else:
            # Handle *italic* inside this part
            italic_parts = re.split(r'(\*[^*]*\*)', part)
            for ip in italic_parts:
                if len(ip) >= 3 and ip.startswith('*') and ip.endswith('*'):
                    # It's an italic segment
                    clean_text = ip[1:-1]  # Strip *
                    run = paragraph.add_run(clean_text)
                    run.italic = True
                else:
                    # Plain text – add as-is
                    paragraph.add_run(ip)