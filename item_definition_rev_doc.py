# item_definition_rev_doc.py - Item Definition Review Word document formatter
from datetime import datetime
from docx import Document
from docx.shared import Pt, RGBColor
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.enum.table import WD_TABLE_ALIGNMENT
from cat.log import log
from .utils import (create_custom_styles, add_header_footer, add_section_explanation, 
                   group_reviews_by_category)

def create_review_docx(reviews, plugin_folder, timestamp):
    """
    Create a formatted Word document for Item Definition Review.
    
    Args:
        reviews (list): List of parsed review items
        plugin_folder (str): Path to plugin folder
        timestamp (str): Timestamp for document metadata
        
    Returns:
        Document: python-docx Document object
    """
    log.info(f"Creating Review document with {len(reviews)} review items")
    
    doc = Document()
    create_custom_styles(doc, "Review")
    add_header_footer(doc, plugin_folder, 
                     "ISO 26262 Item Definition Review\nGenerated by Kineton FuSa Agent")
    
    # Title page
    doc.add_paragraph('ISO 26262 Part 3 - Item Definition Review Report', style="ReviewTitle")
    doc.add_paragraph(f"Review conducted on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 
                     style="ReviewSubtitle")
    doc.add_paragraph()
    
    # Summary section
    create_summary_section(doc, reviews)
    
    # Page break before detailed results
    doc.add_page_break()
    
    # Group reviews by category
    categorized_reviews = group_reviews_by_category(reviews, plugin_folder)
    
    # Detailed review results by category
    create_detailed_results_section(doc, categorized_reviews)
    
    log.info("Review document created successfully")
    return doc

def create_summary_section(doc, reviews):
    """
    Create summary section with statistics.
    For templates, shows structure without calculations.
    
    Args:
        doc: python-docx Document object
        reviews (list): List of review items
    """
    total_items = len(reviews)
    
    # Check if this is a template (empty status fields)
    is_template = all(not review.get('status', '') for review in reviews)
    
    if is_template:
        # Template mode - no statistics
        doc.add_paragraph("Review Summary", style="ReviewHeader")
        summary_table = doc.add_table(rows=2, cols=2)
        summary_table.style = 'Table Grid'
        summary_table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        summary_table.rows[0].cells[0].text = "Total Requirements to Review:"
        summary_table.rows[0].cells[1].text = str(total_items)
        summary_table.rows[1].cells[0].text = "Template Status:"
        summary_table.rows[1].cells[1].text = "Ready for review"
        
        for i in range(2):
            for cell in summary_table.rows[i].cells:
                cell.paragraphs[0].runs[0].font.size = Pt(10)
                if i == 0:
                    cell.paragraphs[0].runs[0].font.bold = True
    else:
        # Normal review mode - calculate statistics
        passed_items = len([r for r in reviews if r.get('status', '').lower() == 'pass'])
        failed_items = len([r for r in reviews if r.get('status', '').lower() == 'fail'])
        partial_items = len([r for r in reviews if 'partial' in r.get('status', '').lower()])
        
        doc.add_paragraph("Review Summary", style="ReviewHeader")
        summary_table = doc.add_table(rows=5, cols=2)
        summary_table.style = 'Table Grid'
        summary_table.alignment = WD_TABLE_ALIGNMENT.CENTER
        
        summary_data = [
            ("Total Requirements Reviewed:", str(total_items)),
            ("Passed:", str(passed_items)),
            ("Failed:", str(failed_items)),
            ("Partially Passed:", str(partial_items)),
            ("Compliance Rate:", f"{(passed_items/total_items)*100:.1f}%" if total_items > 0 else "0%")
        ]
        
        for i, (label, value) in enumerate(summary_data):
            summary_table.rows[i].cells[0].text = label
            summary_table.rows[i].cells[1].text = value
            for cell in summary_table.rows[i].cells:
                cell.paragraphs[0].runs[0].font.size = Pt(10)
                if i == len(summary_data) - 1:
                    cell.paragraphs[0].runs[0].font.bold = True

def create_detailed_results_section(doc, categorized_reviews):
    """
    Create detailed results section organized by category.
    
    Args:
        doc: python-docx Document object
        categorized_reviews (dict): Reviews grouped by category
    """
    doc.add_paragraph("Detailed Review Results", style="ReviewHeader")
    
    # Process each category in order
    for category, category_reviews in categorized_reviews.items():
        if not category_reviews:
            continue
        
        # Add category heading
        doc.add_paragraph(category, style="ReviewHeader")
        
        # Add category explanation
        add_section_explanation(doc, category)
        
        # Add review items in this category
        for i, review in enumerate(category_reviews, 1):
            create_review_item_table(doc, review, category, i)
            doc.add_paragraph()  # Space between items
        
        # Add space between categories
        doc.add_paragraph()

def create_review_item_table(doc, review, category, item_number):
    """
    Create a formatted table for a single review item.
    
    Args:
        doc: python-docx Document object
        review (dict): Review item data
        category (str): Category name
        item_number (int): Item number within category
    """
    doc.add_paragraph(f"{category} â€“ Item {item_number}", style="ReviewHeader")
    
    # Create table for the review item
    table = doc.add_table(rows=6, cols=2)
    table.style = 'Table Grid'
    
    fields = [
        ("ID:", review.get('id', 'N/A')),
        ("Requirement:", review.get('requirement', 'N/A')),
        ("Description:", review.get('description', 'N/A')),
        ("Status:", review.get('status', '') or '[To be filled by reviewer]'),
        ("Comment:", review.get('comment', '') or '[To be filled by reviewer]'),
        ("Hint for Improvement:", review.get('hint_for_improvement', '') or '[To be filled by reviewer]')
    ]
    
    for j, (field_name, field_value) in enumerate(fields):
        table.rows[j].cells[0].text = field_name
        table.rows[j].cells[1].text = field_value
        
        # Style the cells
        table.rows[j].cells[0].paragraphs[0].runs[0].font.bold = True
        table.rows[j].cells[0].paragraphs[0].runs[0].font.size = Pt(10)
        table.rows[j].cells[1].paragraphs[0].runs[0].font.size = Pt(10)
        
        # Apply placeholder styling for empty fields
        if field_value.startswith('[To be filled'):
            table.rows[j].cells[1].paragraphs[0].runs[0].font.italic = True
            table.rows[j].cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(128, 128, 128)
        
        # Color code status only if it has a value
        if field_name == "Status:" and field_value and not field_value.startswith('['):
            status_lower = field_value.lower()
            if 'pass' in status_lower and 'fail' not in status_lower:
                table.rows[j].cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(0, 128, 0)
            elif 'fail' in status_lower:
                table.rows[j].cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 0, 0)
            elif 'partial' in status_lower:
                table.rows[j].cells[1].paragraphs[0].runs[0].font.color.rgb = RGBColor(255, 165, 0)